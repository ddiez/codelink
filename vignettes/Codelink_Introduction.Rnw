%\VignetteIndexEntry{codelink}
%\VignetteKeywords{Preprocessing, Codelink}
%\VignetteDepends{codelink}
%\VignetteDepends{knitr}
%\VignettePackage{codelink}

\documentclass{article}
\usepackage[utf8]{inputenc}
\usepackage[english]{babel}
\usepackage{geometry}
\geometry{verbose,tmargin=3cm,bmargin=3cm,lmargin=3cm,rmargin=3cm}

\newcommand{\Robject}[1]{{\texttt{#1}}}
\newcommand{\Rfunction}[1]{{\texttt{#1}}}
\newcommand{\Rpackage}[1]{{\texttt{#1}}}

\begin{document}

<<include=FALSE,cache=FALSE>>=
library(codelink)
library(knitr)
opts_chunk$set(fig.align = 'center', concordance=TRUE)
@


\title{Introduction to the Codelink package}
\author{Diego Diez}
\maketitle

\section{Introduction}

This package implements methods to facilitate the preprocessing and analysis of Codelink microarrays. Codelink is a platform for the analysis of gene expression that uses 30 base long oligonucleotides. Codelink is currently owned by Applied Microarrays, Inc. (previously was GE Healthcare and Amersham). There is a proprietary software for reading scanned images, doing spot intensity quantification and some diagnostics. A Codelink microarray consists of a number of species-specific probes to measure gene expression, as well as some other control probes. Accordinly each probe type is labeled appropriately (see Table~\ref{tab:Type}). The Codelink software assigns quality flags to each spot (see Table~\ref{tab:Flag}) on the basis of a signal to noise ratio (SNR) computation (Eq: \ref{eq:SNR}) and other morphological characteristics as irregular shape of the spots, saturation of the signal or manufacturer spots removed. By default, the software performs background correction (subtract) followed by median normalization. The results can be exported in several formats as XML, Excel, plain text, etc.

Currently two different approaches are supported to store Codelink data in R. The first uses a class (\Robject{Codelink}), which was the first one available. The second uses the new \Robject{CodelinkSet} class, which inherits from the \Robject{ExpressionSet} class in Biobase. Although the use of \Robject{CodelinkSet} is recommended, the \Robject{Codelink} infrastructure is maintained for backbard compatibility. In this document the workflow using \Robject{CodelinkSet} methods will be presented. Information about the old infrastructure can be found in the vignette (Codelink\_Legacy.pdf)


\begin{table}[ht]
\begin{center}
\begin{tabular}{|r|l|}
\hline \em Probe type & \em Description \\
\hline
DISCOVERY & Measure gene expression \\
POSITIVE & Positive control \\
NEGATIVE & Negative control \\
FIDUCIAL & Grid alignment \\
OTHER & Other controls and housekeeping genes \\
\hline
\end{tabular}
\caption{Probe types for Codelink arrays.}
\label{tab:Type}
\end{center}
\end{table}

\begin{table}[ht]
\begin{center}
\begin{tabular}{|c|l|}
\hline \em Flag & \em Description \\
\hline
G & Good signal (SNR $\geq$ 1)\\
L & Limit signal (SNR $<$ 1)\\
I & Irregular shape \\
S & Saturated signal \\
M & MSR spot \\
C & Background contaminated\\
X & User excluded spots\\
\hline
\end{tabular}
\caption{Quality Flag description. SNR: Signal to Noise Ratio.}
\label{tab:Flag}
\end{center}
\end{table}

\begin{equation}
SNR=\frac{Smean}{(Bmedian + 1.5 * Bstdev)}
\label{eq:SNR}
\end{equation}



\section{Reading data}

Only data exported as plain text from Codelink software is supported. Unfortunately the Codelink exported text format can have arbitrary columns and  header fields so depending of what has been exported reading it into a \Robject{CodelinkSet} object may be more or less complicated. As a rule of thumb it is recommended to include in the exported files at least Spot\_mean and Bkgd\_median values so that background correction and normalization can be performed in R. In addition, Bkgd\_stdev will be needed to compute the SNR. If Raw\_intensity or Normalized\_intensity columns are present then it is possible to avoid background correction and/or normalization, and use the ones performed by the Codelink software. The Feature\_id column will be use to assign unique identifiers to each spot, so that CodelinkSet object can be read appropriately. To read codelink data:

<<eval=FALSE>>=
# NOT RUN #
library(codelink)
# to read data as CodelinkSet object:
f = list.files(pattern="TXT")
codset = readCodelinkSet(filename=f)
# NOT RUN #
@

This assumes that the files have the extension "TXT" (uppercase) and are in the working directory. You can prepare a targets file with each file's name and additional phenotype information, then pass this information to readCodelinkSet() so that it is stored in the CodelinkSet object.

<<eval=FALSE>>=
# NOT RUN #
pdata=read.AnnotatedDataFrame("targets.txt")
codset=readCodelinkSet(filename=pdata$FileName, phenoData=pdata)
# NOT RUN #
@

<<>>=
# sample dataset.
data(codelink.exprset)
codelink.exprset
@
\section{Background correction}

If Spot\_mean and Bkgd\_median values are available then it is possible to perform background correction in R. Background correction is borrowed from the limma package. Methods "none", "subtract", "half" and "normexp" are available. The default is set to half, because it is very fast. However, more sensitive (although time consuming) methods like normexp are recommended. Also, it is possible to assign an offset to avoid low intensity probes to have high M variances.

<<>>=
codset = codCorrect(codelink.exprset, method = "half", offset = 0)
@

\section{Normalization}

Normalization of the background corrected intensities is done by the wrapper 
function \Rfunction{normalize} (or codNormalize()). Here again, normalization is borrowed from the limma package. Methods "median", "quantile" (the default) and "loess" are available. Loess performs CyclicLoess normalziation and accepts weights.

<<>>=
codset = codNormalize(codset, method = "quantile")
@

\section{Diagnostic plots}

There are some plot facilities to help diagnose the effect of background correction and normalization, as well as identify putative faulty arrays. The most commonly used functions are MA plots, density plots and array images. All these functions can be accessed through the function codPlot(). The parameter "what" specifies the type of plot: "ma" (default), "density", "scatter" and "image" are valid choices.


<<fig.cap="MA plot.">>=
codPlot(codset)
@

<<fig.cap="Density plot.">>=
codPlot(codset, what="density")
@

When Logical\_row and Logical\_col columns are present in the original data files, this information is used to track the physical location of each probe in the array to plot a pseudo image. It is possible to plot the background intensities (default), the spot mean, raw and normalized intensities and the SNR values. This images are useful to identify spatial artifact that may be affecting the analysis.

<<eval,fig.height=1,fig.width=3>>=
codPlot(codset, what="image")
@


\subsection{Fitting linear models}

A typical analysis include the testing for differentially expressed probes between two populations. This can be performed using many different R/Bioconductor packages, but the limma package is one of the most popular options. Limma can readily use CodelinkSet objects, and can take advantage of weights generated during data reading.

<<eval=FALSE>>=
fit = lmFit(codset, design=c(1,1,2,2), weights=getWeight(codset))
fit2 = eBayes(fit)
topTable(fit2)
@

\end{document}
